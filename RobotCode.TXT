#define trig 3
#define echo1 A0
#define echo2 A1
#define echo3 A2
#define leftR 5
#define leftF 6
#define rightR 9
#define rightF 10
#define collectF 11
#define shootF 12
float distance=0;
unsigned long t=0,initial=0;
long rightspeed=0,leftspeed=0;
char blutooth_responce=0;
char serialReading=0;
char reading=0;
bool flag=1;
void movingButtons();
void rightForward();
void leftForward();
void rightBackward();
void leftBackward();
void restRobot();
void collectButton();
void shootButton();
void movingButtonsD();
void getD();
void calculatingLoop(int echo);
bool in=0;
void setup()
{
  pinMode(rightF,OUTPUT);
  pinMode(rightR,OUTPUT);
  pinMode(leftF,OUTPUT);
  pinMode(leftR,OUTPUT);
  pinMode(trig,OUTPUT);
  pinMode(echo1,INPUT);
  pinMode(echo2,INPUT);
  pinMode(echo3,INPUT);
  pinMode(collectF,OUTPUT);
  pinMode(shootF,OUTPUT);
  Serial.begin(9600); //begin the serial to recieve data from the blutooth module on it
  //initialize the robot to be at rest
  restRobot();
  Serial.println("I am waiting now ");
  while(Serial.available()==0); //This line means that it will perform nothing until the application is connected and open initially at the normal screen to send N to the serial monitor 
  serialReading=Serial.read(); //for the first switch case only
}

void loop() 
{
  switch (serialReading)
  {
  case 'N'/*the button that turns to normal screen was pressed*/ :
    Serial.println("I GOT N ");
    while(serialReading!='U'&& serialReading!='C'/*we are still in normal screen*/)
    {
      while(Serial.available()==0);
      blutooth_responce=Serial.read();
      movingButtons();  
    }
    break;    
  case 'U' /*the button that turns to ultrasonic screen was pressed*/:
    Serial.println("I got U");
    while(serialReading!='N'&&serialReading!='C'/*we are still in ultrasonic screen*/)
    {
      if(blutooth_responce==0)
      {
        while(Serial.available()==0);
        blutooth_responce=Serial.read();        
      }

      movingButtonsD();
    }
    break;
  case 'C' /*the button that turns to collector and shooter screen was pressed*/ :
    Serial.println("I got C(shooter and collector)");
    while(serialReading!='N' && serialReading !='U')
    {
      while(Serial.available()==0);
      blutooth_responce=Serial.read();
      movingButtons();
    }
  }
}
void movingButtons()
{
  switch (blutooth_responce)
  {
  case 'F' :
    rightForward();
    leftForward();
    Serial.println("forward till change");
    break;
  case 'B' :
    rightBackward();
    leftBackward(); 
    Serial.println("backward till change");  
    break;
  case 'L' :
    leftBackward();
    rightForward();
    Serial.println("left till change");
    break;
  case 'R' :
    leftForward();
    rightBackward();
    Serial.println("right till change");  
    break;
  case 'S' :
    restRobot();
    break;
  case 'U' :
    serialReading='U';
    blutooth_responce=0;
    break;
  case 'N' :
    serialReading='N';
    blutooth_responce=0;
    break;
  case 'T' :
    collectButton();
    break;
  case 'O' :
    shootButton();
  case 'r' :
    Serial.setTimeout(1);
    rightspeed=Serial.parseInt();
    analogWrite(rightF,rightspeed<0? 0:rightspeed);
    analogWrite(rightR,rightspeed>0? 0:-1*rightspeed);
    Serial.print("I(right) am moving on ");
    Serial.print(rightspeed);
    Serial.println(" till change");
    break;
  case 'l' :
    Serial.setTimeout(1);
    leftspeed=Serial.parseInt();
    analogWrite(leftF,leftspeed<0? 0:leftspeed);
    analogWrite(leftR,leftspeed>0? 0:-1*leftspeed);
    Serial.print("I(left) am moving on ");
    Serial.print(leftspeed);
    Serial.println(" till change");
    break;
  case 's' :
    Serial.println("I STOPPED");
    digitalWrite(collectF,LOW);
    digitalWrite(shootF,LOW);
  }
}
void rightForward()
{
  digitalWrite(rightF,HIGH);
  digitalWrite(rightR,LOW);
}
void leftForward()
{
  digitalWrite(leftF,HIGH);
  digitalWrite(leftR,LOW);
}
void rightBackward()
{
  digitalWrite(rightR,HIGH);
  digitalWrite(rightF,LOW);
}
void leftBackward()
{
  digitalWrite(leftR,HIGH);
  digitalWrite(leftF,LOW);
}
void restRobot()
{
  digitalWrite(rightF,LOW);
  digitalWrite(rightR,LOW);
  digitalWrite(leftF,LOW);
  digitalWrite(leftR,LOW);
  Serial.println("REST");
}
void collectButton()
{
  Serial.println("I am collecting");
  digitalWrite(collectF,HIGH);
}
void shootButton()
{
  Serial.println("I am shooting");
  digitalWrite(shootF,HIGH);
}
void movingButtonsD()
{
  switch (blutooth_responce)
  {
  case 'F' :
    rightForward();
    leftForward();
    Serial.println("forward till change");
    getD();
    break;
  case 'B' :
    rightBackward();
    leftBackward(); 
    Serial.println("backward till change");  
    getD();
    break;
  case 'L' :
    leftBackward();
    rightForward();
    Serial.println("left till change");
    getD();
    break;
  case 'R' :
    leftForward();
    rightBackward();
    Serial.println("right till change"); 
    getD();
    break;
  case 'S' :
    restRobot();
    blutooth_responce=0;
    break;
  case 'U' :
    serialReading='U';
    blutooth_responce=0;
    break;
  case 'N' :
    serialReading='N';
    blutooth_responce=0;
    break;
  }
}
void getD()
{
  while(Serial.available()==0)
  {  
    calculatingLoop(echo1);
    calculatingLoop(echo2);
    calculatingLoop(echo3);
    delay(250);
  }
    blutooth_responce=Serial.read();
    flag=1;
    t=0;
}
void calculatingLoop(int echo)
{
    while(Serial.available()==0)
    {
      if(flag==1)
      {
        digitalWrite(trig,HIGH);
        delayMicroseconds(10);
        digitalWrite(trig,LOW);        
      }
      if(digitalRead(echo3)==HIGH&&in==0)
      {
        initial=micros();
        in=1;
      }
      if(digitalRead(echo3)==LOW&&in==1)
      {
        t=micros()-initial;
        distance=0.01715*t;
        Serial.println(distance);
        in=0;
      }
      flag=0;
      if(t)
      {
        flag=1;
        t=0;
        break;
      }  
    }
}
